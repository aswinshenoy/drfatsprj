user  nginx;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

# One worker process per CPU core.
worker_processes auto;

# worker_connections * 2 file descriptors -> 1 for upstream, 1 for downstream
worker_rlimit_nofile 20000;

events {
    # max clients = worker_connections * worker_processes
    # determines how much clients will be served per worker
    worker_connections 10000;

    # Preferred connection method for newer linux versions.
    # Essential for linux, optmized to serve many clients with each thread.
    use epoll;

    # Let each process accept multiple connections.
    # Accept as many connections as possible, after nginx gets notification
    # about a new connection.
    # May flood worker_connections, if that option is set too low.
    multi_accept on;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # to boost I/O, we disable access logs
    access_log  off;

    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    sendfile        on;
    # send headers in one piece, it is better than sending them one by one
    tcp_nopush     on;


    client_body_timeout 12;
    client_header_timeout 12;
    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;
    # if client stop responding, free up memory -- default 60
    send_timeout 10;
    # server will close connection after this time -- default 65
    keepalive_timeout 15;

    client_body_buffer_size 10K;
    client_header_buffer_size 1k;
    client_max_body_size 8m;
    large_client_header_buffers 2 1k;

    gzip  on;
    gzip_min_length 1000;
    gzip_comp_level 1;
    gzip_vary on;
    gzip_disable msie6;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
    # text/html is always compressed by HttpGzipModule
    text/css
    text/javascript
    text/xml
    text/plain
    text/x-component
    application/javascript
    application/x-javascript
    application/json
    application/xml
    application/rss+xml
    application/atom+xml
    font/truetype
    font/opentype
    application/vnd.ms-fontobject
    image/svg+xml;

    include /etc/nginx/conf.d/*.conf;
}
